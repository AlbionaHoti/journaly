datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prisma_client {
  provider = "prisma-client-js"
}

// A Journaly User

model User {
  id                String        @id @default(cuid())
  name              String
  email             String        @unique
  handle            String        @unique
  password          String
  userRole          UserRole      @default(FREE_USER)
  resetToken        String?
  resetTokenExpiry  Float?
  bio               String?
  posts             Post[]
  socialMedia       SocialMedia[]
  interests         Topic[]
  location          Location?
  languagesNative   LanguageNative[]
  languagesLearning LanguageLearning[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// Intermediary Table for the M2M relationship

model LanguageLearning {
  id       Int @id
  user     User @relation(fields: [userId], references: [id])
  userId   String @unique
  language Language @relation(fields: [languageId], references: [id])
  languageId String
  @@unique([userId, languageId])
}

// Intermediary Table for the M2M relationship

model LanguageNative {
  id       Int @id
  user     User @relation(fields: [userId], references: [id])
  userId   String
  language Language @relation(fields: [languageId], references: [id])
  languageId String
  @@unique([userId, languageId])
}

// Social Media platforms that Users can add to their profile

model SocialMedia {
  id       String              @id @default(cuid())
  platform SocialMediaPlatform
  url      String
  author   User @relation(fields: [authorId], references: [id])
  authorId String
}

// A journal entry - or Post - that a User writes

model Post {
  id         String     @id @default(cuid())
  title      String
  body       String
  status     PostStatus @default(DRAFT)
  images     Image[]
  largeImage String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  readCount  Int        @default(0)
  readTime   Int        @default(1)
  likes      Like[]
  comments   Comment[]
  topic      Topic[]
  language   Language?
  // TEMPORARY
  longitude  Float?
  latitude   Float?
}


// A language that a post can be written in.
// @relation: LanguageNative - a language spoken natively by a User
// @relation: LanguageLearning - a language being learned by a User

model Language {
  id            String  @id @default(cuid())
  posts         Post[]
  name          String
  dialect       String?
  nativeUsers   LanguageNative[]
  learningUsers LanguageLearning[]  
}

// Location of a Post or a User

model Location {
  id      String @id @default(cuid())
  country String
  city    String
}

// Subject of a Post

model Topic {
  id    String @id @default(cuid())
  name  String
  posts Post[]
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User
  post      Post
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  author    User
  post      Post
  thread    Thread
}

// A Comment Thread
// @position: the starting index of a comment thread in a Post

model Thread {
  id       String   @id @default(cuid())
  position Int
  comments Comment[]
}

// Something that a User is interested in.
// @relation: 

model Interest {
  id    String @id @default(cuid())
  name  String
  posts Post[]
}

// An Image that can be uploaded to a Post.

model Image {
  id        String  @id @default(cuid())
  smallSize String
  largeSize String
}

// Roles to determine a Users permissions and which features they can access
// @FREE_USER - can access core features
// @PRO_USER - a User paying a monthly subscription and can access pro features

enum UserRole {
  ADMIN MODERATOR FREE_USER PRO_USER
}

// Status of a Post
// @DRAFT: User has either not finished writing or has chosen to keep this Post private
// @PUBLISHED: User has published this Post publically for feedback

enum PostStatus {
  DRAFT PUBLISHED
}

enum SocialMediaPlatform {
  FACEBOOK YOUTUBE INSTAGRAM LINKEDIN
}
