### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Comment {
  author: User!
  authorId: Int!
  body: String!
  createdAt: DateTime!
  id: Int!
}

input CommentWhereUniqueInput {
  id: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input EditorNode {
  bold: Boolean
  children: [EditorNode!]
  italic: Boolean
  text: String
  type: String
  underline: Boolean
}

type Image {
  id: Int!
  smallSize: String!
}

input ImageWhereUniqueInput {
  id: Int
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Language {
  dialect: String
  id: Int!
  learningUsers: [User!]
  name: String!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, skip: Int): [Post!]!
}

type LanguageLearning {
  language: Language!
}

input LanguageLearningWhereUniqueInput {
  id: Int
  userId_languageId: UserIdLanguageIdCompoundUniqueInput
}

type LanguageNative {
  language: Language!
}

input LanguageNativeWhereUniqueInput {
  id: Int
  userId_languageId: UserIdLanguageIdCompoundUniqueInput
}

type Location {
  city: String!
  country: String!
  id: Int!
}

type Mutation {
  addLanguageLearning(languageId: Int!): LanguageLearning
  addLanguageNative(languageId: Int!): LanguageNative
  createComment(body: String!, threadId: Int!): Comment
  createPost(body: [EditorNode!], languageId: Int!, status: PostStatus, title: String!): Post
  createThread(endIndex: Int!, highlightedContent: String!, postId: Int!, startIndex: Int!): Thread
  createUser(email: String!, handle: String!, password: String!): User
  deleteComment(commentId: Int!): Comment
  loginUser(identifier: String!, password: String!): User
  updateComment(body: String!, commentId: Int!): Comment
  updatePost(body: [EditorNode!], postId: Int!, status: PostStatus, title: String): Post
}

type Post {
  author: User!
  body: String!
  createdAt: DateTime!
  excerpt: String!
  id: Int!
  images(after: ImageWhereUniqueInput, before: ImageWhereUniqueInput, first: Int, last: Int, skip: Int): [Image!]!
  language: Language!
  likes(after: PostLikeWhereUniqueInput, before: PostLikeWhereUniqueInput, first: Int, last: Int, skip: Int): [PostLike!]!
  readTime: Int!
  status: PostStatus!
  threads(after: ThreadWhereUniqueInput, before: ThreadWhereUniqueInput, first: Int, last: Int, skip: Int): [Thread!]!
  title: String!
}

type PostLike {
  id: Int!
}

input PostLikeWhereUniqueInput {
  id: Int
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  currentUser: User
  feed(first: Int, language: Int, search: String, skip: Int, topic: String): [Post!]
  languages: [Language!]
  postById(id: Int): Post
  posts(authorId: Int!, status: PostStatus!): [Post!]
  users: [User!]
}

type Thread {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int, skip: Int): [Comment!]!
  endIndex: Int!
  highlightedContent: String!
  id: Int!
  startIndex: Int!
}

input ThreadWhereUniqueInput {
  id: Int
}

type User {
  bio: String
  createdAt: DateTime!
  email: String!
  handle: String!
  id: Int!
  languagesLearning(after: LanguageLearningWhereUniqueInput, before: LanguageLearningWhereUniqueInput, first: Int, last: Int, skip: Int): [LanguageLearning!]!
  languagesNative(after: LanguageNativeWhereUniqueInput, before: LanguageNativeWhereUniqueInput, first: Int, last: Int, skip: Int): [LanguageNative!]!
  location: Location
  name: String
  posts: [Post!]!
  profileImage: String
  userRole: UserRole!
}

input UserIdLanguageIdCompoundUniqueInput {
  languageId: Int!
  userId: Int!
}

enum UserRole {
  ADMIN
  FREE_USER
  MODERATOR
  PRO_USER
}
